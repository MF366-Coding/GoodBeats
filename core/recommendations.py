from simple_webbrowser import LinkString
import requests


# TODO
"""
artist_data = requests.get(
        base_url,
        headers={
            "Authorization": f"{auth.token_type} {auth.access_token}"
        }
    )
"""

def GetRecommendations(artist_seeds, genre_seeds, track_seeds, limit: int, acousticness_range: tuple = (0, 1), danceability_range: tuple = (0, 1), duration_range: tuple | None = None, energy_range: tuple = (0, 1), instrumentalness_range: tuple = (0, 1), key_range: range = range(0, 11), liveness_range: tuple = (0, 1), loudness_range: tuple[int | float, int | float] = (0, 1), mode_range: range = range(0, 1), popularity_range: range = range(0, 100), speechiness_range: tuple[int | float, int | float] = (0, 1), tempo_range: range | tuple | None = None, time_signature_range: range = range(0, 11), valence_range: tuple[int | float, int | float] = (0, 1), target_acousticness: int | float | None = None, target_danceability: int | float | None = None, target_duration: int | None = None, target_energy: int | float | None = None, target_instrumentalness: int | float | None = None, target_key: int | None = None, target_liveness: int | float | None = None, target_loudness: int | float | None = None, target_mode: int | None = None, target_popularity: int | None = None, target_speechiness: int | float | None = None, target_tempo_bpm: int | float | None = None, target_time_signature: int | None = None, target_valence: int | float | None = None, market: str | None = None):
    base_url = f"https://api.spotify.com/v1/recommendations?limit={limit}{f'&market={market}&' if market else '&'}{(f'seed_artists={artist_seeds.ToString()}&' if artist_seeds is not None else '&')}{(f'seed_genres={genre_seeds.ToString()}&' if genre_seeds is not None else '&')}{(f'seed_tracks={track_seeds.ToString()}&' if track_seeds is not None else '&')}{(f'min_acousticness={acousticness_range[0]}&' if acousticness_range else '&')}{(f'max_acousticness={acousticness_range[1]}&' if acousticness_range else '&')}{(f'target_acousticness={target_acousticness}&' if target_acousticness else '&')}{(f'min_danceability={danceability_range[0]}&' if danceability_range else '&')}{(f'max_danceability={danceability_range[1]}&' if danceability_range else '&')}{(f'target_danceability={target_danceability}&' if target_danceability else '&')}{(f'min_duration_ms={duration_range[0]}&' if duration_range else '&')}{(f'max_duration_ms={duration_range[1]}&' if duration_range else '&')}{(f'target_duration_ms={target_duration}&' if target_duration else '&')}{(f'min_energy={energy_range[0]}&' if energy_range else '&')}{(f'max_energy={energy_range[1]}&' if energy_range else '&')}{(f'min_instrumentalness={instrumentalness_range[0]}&' if instrumentalness_range else '&')}{(f'max_instrumentalness={instrumentalness_range[1]}&' if instrumentalness_range else '&')}{(f'target_instrumentalness={target_instrumentalness}&' if target_instrumentalness else '&')}{(f'min_key={key_range[0]}&' if key_range else '&')}{(f'max_key={key_range[1]}&' if key_range else '&')}{(f'target_key={target_key}&' if target_key else '&')}{(f'min_liveness={liveness_range[0]}&' if liveness_range else '&')}{(f'max_liveness={liveness_range[1]}&' if liveness_range else '&')}{(f'target_liveness={target_liveness}&' if target_liveness else '&')}{(f'min_loudness={loudness_range[0]}&' if loudness_range else '&')}{(f'max_loudness={loudness_range[1]}&' if loudness_range else '&')}{(f'target_loudness={target_loudness}&' if target_loudness else '&')}min_mode=8&max_mode=9&target_mode=3&min_popularity=4&max_popularity=5&target_popularity=6&min_speechiness=7&max_speechiness=7&target_speechiness=4&min_tempo=23&max_tempo=6&target_tempo=4&min_time_signature=6&max_time_signature=5&target_time_signature=3&min_valence=5&max_valence=4&target_valence=6"
